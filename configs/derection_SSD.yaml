####################### PRUNING SETTINGS ############################
path:
    exp_save: /workspace/snp           # Путь к каталогу для сохранения промежуточных результатов, мусора, хэша
    modelName: SSD_3     # Название эксперимента

#====================== MODEL ==================================|
model:
    type_save_load: pth # interface - загрузка и сохранение в интерфейс, pth - загрузка модели и сохранение в формате pth.
    path_to_resurs: /workspace/prj/Pruning/start/ToNikita/ssd # Путь к каталогу с interface.pt если type_save_load = interface. К model.pth если type_save_load = pth
    name_resurs: SSD
    size: [300,300]
    gpu: 9 # карта для main процесса прунинга
    anchors:    [
                [[16, 16], [18, 18], [16, 8], [8, 16]],
                [[32, 32], [36, 36], [32, 16], [16, 32], [36, 12], [12, 36]],
                [[64, 64], [75, 75], [64, 32], [32, 64], [75, 25], [25, 75]],
                [[112, 112], [150, 150], [112, 64], [64, 112], [150, 50], [50, 150]],
                [[224, 224], [300, 300], [224, 112], [112, 224]],
                ]
    feature_maps_w: [38, 19, 10, 5, 3]
    feature_maps_h: [38, 19, 10, 5, 3]
    aspect_ratios: [[2], [2, 3], [2, 3], [2, 3], [2]]

task:
    type: detection # classification, segmentation, detection, special points
    detection: ssd # ssd or Yolo

mask:
    type:  mask # mask or None
    sours_mask: None # list связвнных компонент или None

#====================== DATASET ================================|
dataset:
    num_classes: 5
    annotation_path: /workspace/db_labs/paradigma/RoadSignDetection/images_split
    annotation_name:
    annotation_name_train: instances_train.json
    annotation_name_val: instances_val.json

#===================== RETRAINING ==============================|
# Используется только в My_pruning
# Параметры дообучения сети после обрезки.
# Вызывается количество_итераций_обрезки * Количество_блоков_сети раз
retraining:
    num_epochs: 1
    lr: 0.00001
    dataLoader:
        batch_size_t: 10
        num_workers_t: 0
        pin_memory_t: True
        drop_last_t: True
        shuffle_t: True

        batch_size_v: 10
        num_workers_v: 0
        pin_memory_v: True
        drop_last_v: True
        shuffle_v: False
#====================== TRAINING ===============================|
# Полноценное обучение (дообучение) после обрезки.
# Вызывается 1 раз в конце работы алгоритма
training:
    num_epochs: 1
    lr: 0.00001
    dataLoader:
        batch_size_t: 10
        num_workers_t: 4
        pin_memory_t: True
        drop_last_t: True
        shuffle_t: True

        batch_size_v: 10
        num_workers_v: 4
        pin_memory_v: True
        drop_last_v: True
        shuffle_v: False
#===================== ALGORITHM ===============================|
algorithm: My_pruning             # Алгоритм прунинга (My_pruning, AGP, Linear, LotteryTicket, TaylorFOWeight, ActivationMeanRank, FPGM, L2Norm)
#===================== MY_PRUNING ==============================|
my_pruning:
    alf: 32                       # Сохоанить кратность первых двух коналов конволюции числу alf (33*65*7*7)->(32*64*7*7)
    P: 0.000001                        # Сколько отрезать от сети (Пока основывается на ptflops.get_model_complexity_info)
    cart: [0,9,0,9]                   # На каких картах обучать [0,0,1,1,1,2] (для паралельного обучения, запустится 6 независимых тренировок на соответствующих картах)
    iskl: []                      # Название слоёв, которые не нужно обрезать [input_stem.0.conv,blocks.1.conv2.conv]
    algoritm: L2Norm      # TaylorFOWeight, L2Norm. Прунинг в основе.TaylorFOWeight в 2 раза дольще L2Norm но немного лучше.
    resize_alf: False             # Обрезать всю сеть до кратности alf (Если False то могут остатся не кратные свертки при условии что их обрезка сильно портит качество)
    delta_crop: 0.1               # Сколько % от текущей свертки резать за 1 итерацию 0.1->(100*100*7*7)->(90->100*7*7)
    restart:
        start_iteration: 0                                      # Итерация с которой продолжить работу (default: 0)
        load: /workspace/snp/SSD_3/orig_model.pth  # Путь к модели (default: exp_save + "/" + modelName + "/" + "orig_model.pth")
#==================== nni_pruning ==============================|
nni_pruning:
    P: 0.5                         # Сколько отрезать от сети (Пока основывается на ptflops.get_model_complexity_info)
    training: True                 # Дообучить после обрезки
    total_iteration: 10             # Итерации обрезки, спользуется в алгоритмах AGP, Linear, LotteryTicket.
    gpu: 9                         # Карта для обучения
