helps = [
"""Классификация - отличить кошку от сабаки.
Сегментация - попиксельная классификация.
Детекция - обнарудение описывающего прямаугольника
и классификация обьекта в нем.

Выбор влияет на метрику качества
и используемый LOSS
""",
"""Лист из названий классов,
являющихся параметрами нейронная
сети, и не являющихся дефолтными
тарчавскими параметрами
""",
"""Формат сохраненной модели.
pth - модель сохраненная через torch.save(model, PATH)
interface - формат сохранения данных из ПАРАДИГМА
(запуск только через контейнер)
""",
"""Название сохраняемого файла без расширения, 
для pth расширение должно быть pth,
а для interface - pt
""",
"""Каталог в котором был вызван torch.save(model, PATH)
или расположен interface.pt.
Здесь должна быть описана модель.
Если модель целиком из библиотеки - достаточно её 
установить 
""",
"""До какого размера
ресайзить изображение
подоваемое на вход
сети (Х, Y)
""",
"""Оставить кратность слоёв
нейнонной сети заданному значению.

Нужен для удобной имплиментации на
вычислитель
""",
"""Сколько % flops
отрезать от сети
""",
"""Лист из индексов карт, на которых будет
происходить запуск распаралеленых процессов
прунинга. 

Запись [0,0,1,1,1] запустит за раз
обрезку 5-ти копий сети. 2-ве копии
но 0-вой карте и 3-ри копии на 3-ей
""",
"""Лист из Name_sloi,
которые не нужно удалять.
Name_sloi в формате 
model.get_submodule(Name_sloi)
""",
"""TaylorFOWeight - примерно в 2 раза
медленнее L2Norm, но лучше сохраняет
точность при большом коэфициенте сжатия.
Однако на сети, явно большей чем нужно
для этой задачи и небольшом прунинге
L2Norm лучше сохраняет качество.
""",
"""Перед запуском
основного алгоритма
обрезать сеть до заданной
кратности
""",
"""% обрезки от одного
слоя за итерацию.
"""
]

retasc = {
    "Классификация": "classification", 
    "Сегментация": "segmentation", 
    "Детекция": "detection"
}